1) #include <stdio.h>

 struct node
{
	int data;
	struct node *left;
	struct node *right;
} node;

node *create()
{
	node *p;
	int x;
	printf("Enter data(-1 for no data):");
	scanf("%d",&x);

	if(x==-1)
		return NULL;

	p=(node*)malloc(sizeof(node));
	p->data=x;

	printf("Enter left child of %d:\n",x);
	p->left=create();

	printf("Enter right child of %d:\n",x);
	p->right=create();

	return p;
}


 //preorder traversal

void preorder(node *t)		//address of root node is passed in t
{
	if(t!=NULL)
	{
		printf("\n%d",t->data);		
		preorder(t->left);		
		preorder(t->right);		
	}
}

int main()
{	
	node *root;
	root=create();
	printf("\nThe preorder traversal of tree is:\n");
	preorder(root);

	return 0;
}

 //preorder traversal

void preorder(node *t)		//address of root node is passed in t
{
	if(t!=NULL)
	{
		printf("\n%d",t->data);		
		preorder(t->left);		
		preorder(t->right);		
	}
}

int main()
{	
	node *root;
	root=create();
	printf("\nThe preorder traversal of tree is:\n");
	preorder(root);

	return 0;
}



2) class Node:
    def _init_(self, key):
        self.left = None
        self.right = None
        self.val = key
 
 
# A function to do inorder tree traversal
def printInorder(root):
 
    if root:
 
        # First recur on left child
        printInorder(root.left)
 
        # then print the data of node
        print(root.val),
 
        # now recur on right child
        printInorder(root.right)
 
 
# A function to do postorder tree traversal
def printPostorder(root):
 
    if root:
 
        # First recur on left child
        printPostorder(root.left)
 
        # the recur on right child
        printPostorder(root.right)
 
        # now print the data of node
        print(root.val),
 
 
# A function to do preorder tree traversal
def printPreorder(root):
 
    if root:
 
        # First print the data of node
        print(root.val),
 
        # Then recur on left child
        printPreorder(root.left)
 
        # Finally recur on right child
        printPreorder(root.right)
 
 
# Driver code
root = Node(1)
root.left = Node(2)
root.right = Node(3)
root.left.left = Node(4)
root.left.right = Node(5)
print "Preorder traversal of binary tree is"
printPreorder(root)
 
print "\nInorder traversal of binary tree is"
printInorder(root)
 
print "\nPostorder traversal of binary tree is"
printPostorder(root)



3) #include <stdio.h>
   #include <stdlib.h>

struct node {
    int key;
    struct node *left, *right;
};


struct node* newNode(int item)
{
    struct node* temp
        = (struct node*)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

//inorder traversal

void inorder(struct node* root)
{
    if (root != NULL) {
        inorder(root->left);
        printf("%d \n", root->key);
        inorder(root->right);
    }
}

/* insert function*/

struct node* insert(struct node* node, int key)
{

    if (node == NULL)
        return newNode(key);


    if (key < node->key)
        node->left = insert(node->left, key);

    else if (key > node->key)
        node->right = insert(node->right, key);


    return node;
}


int main()
{
	int n,i;


    printf("Enter the number of nodes");
    scanf("%d",&n);
    int arr[n];

    printf("Enter the values");

    scanf("%d",&arr[0]);
    struct node* root = NULL;
    root = insert(root, arr[0]);

    for(i=1;i<n;i++){
    	scanf("%d",&arr[i]);
    	insert(root,arr[i]);
	}


    printf("\nThe values in inorder traversal are:\n");

    inorder(root);

    return 0;
}



4) #include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *left, *right;
} * root;

struct node *newNode(int item)
{
    struct node *temp = (struct node *)malloc(sizeof(struct node));
    temp->data = item;
    temp->left = temp->right = NULL;
    return temp;
}

/* Function to find the minimum value node */
struct node *minValueNode(struct node *node)
{
    struct node *current = node;
    /* loop down to find the leftmost leaf */
    while (current->left != NULL)
        current = current->left;
    return current;
}

/* Function to delete the given node */

struct node *delete_node(struct node *root, int data)
{
    if (root == NULL)
        return root;

    if (data < root->data)
        root->left = delete_node(root->left, data);

    else if (data > root->data)
        root->right = delete_node(root->right, data);

    else
    {
        // node with only one child or no child
        if (root->left == NULL)
        {
            struct node *temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL)
        {
            struct node *temp = root->left;
            free(root);
            return temp;
        }
        // node with two children:
        struct node *temp = minValueNode(root->right);
        // Copy the inorder successor's content to this node
        root->data = temp->data;
        // Delete the inorder successor
        root->right = delete_node(root->right, temp->data);
    }
    return root;
}

// Function to do inorder traversal of BST

void inorder(struct node *root)
{
    if (root != NULL)
    {
        inorder(root->left);
        printf("%d ", root->data);
        inorder(root->right);
    }
}

/* Function to insert a new node with given key in BST */
struct node *insert(struct node *node, int data)
{

    if (node == NULL)
        return newNode(data);

    if (data < node->data)
        node->left = insert(node->left, data);

    else if (data > node->data)
        node->right = insert(node->right, data);

    return node;
}

int main()
{
    int n;
    root = NULL;
    printf("\nEnter the number of nodes : ");
    scanf("%d", &n);
    int i;
    int data;
    printf("\nInput the nodes of the binary search tree : ");
    if (n > 0)
    {
        scanf("%d", &data);
        root = insert(root, data);
    }
    for (i = 1; i < n; i++)
    {
        scanf("%d", &data);
        insert(root, data);
    }
    printf("\nInorder traversal of the BST : ");
    inorder(root);
    printf("\n");
    int del_ele;
    printf("\nEnter the node to be deleted : ");
    scanf("%d", &del_ele);
    delete_node(root, del_ele);
    printf("\nInorder traversal after deletion : ");
    inorder(root);
    printf("\n");
    return 0;
}



5) #include <stdio.h>
#include <stdlib.h>
#define SIZE 40

struct queue
{
    int items[SIZE];
    int front;
    int rear;
};

struct queue *createQueue();
void enqueue(struct queue *q, int);
int dequeue(struct queue *q);
void display(struct queue *q);
int isEmpty(struct queue *q);
void printQueue(struct queue *q);

struct node
{
    int vertex;
    struct node *next;
};

struct node *createNode(int);

struct Graph
{
    int numVertices;
    struct node **adjLists;
    int *visited;
};

// BFS algorithm
void bfs(struct Graph *graph, int startVertex)
{
    struct queue *q = createQueue();

    graph->visited[startVertex] = 1;
    enqueue(q, startVertex);

    while (!isEmpty(q))
    {
        printQueue(q);
        int currentVertex = dequeue(q);
        printf("\nVisited %d\n", currentVertex);

        struct node *temp = graph->adjLists[currentVertex];

        while (temp)
        {
            int adjVertex = temp->vertex;

            if (graph->visited[adjVertex] == 0)
            {
                graph->visited[adjVertex] = 1;
                enqueue(q, adjVertex);
            }
            temp = temp->next;
        }
    }
}

// Creating a node
struct node *createNode(int v)
{
    struct node *newNode = malloc(sizeof(struct node));
    newNode->vertex = v;
    newNode->next = NULL;
    return newNode;
}

// Creating a graph
struct Graph *createGraph(int vertices)
{
    struct Graph *graph = malloc(sizeof(struct Graph));
    graph->numVertices = vertices;

    graph->adjLists = malloc(vertices * sizeof(struct node *));
    graph->visited = malloc(vertices * sizeof(int));

    int i;
    for (i = 0; i < vertices; i++)
    {
        graph->adjLists[i] = NULL;
        graph->visited[i] = 0;
    }

    return graph;
}

// Add edge
void addEdge(struct Graph *graph, int src, int dest)
{
    // Add edge from src to dest
    struct node *newNode = createNode(dest);
    newNode->next = graph->adjLists[src];
    graph->adjLists[src] = newNode;

    // Add edge from dest to src
    newNode = createNode(src);
    newNode->next = graph->adjLists[dest];
    graph->adjLists[dest] = newNode;
}

// Create a queue
struct queue *createQueue()
{
    struct queue *q = malloc(sizeof(struct queue));
    q->front = -1;
    q->rear = -1;
    return q;
}

// Check if the queue is empty
int isEmpty(struct queue *q)
{
    if (q->rear == -1)
        return 1;
    else
        return 0;
}

// Adding elements into queue
void enqueue(struct queue *q, int value)
{
    if (q->rear == SIZE - 1)
        printf("\nQueue is Full!!");
    else
    {
        if (q->front == -1)
            q->front = 0;
        q->rear++;
        q->items[q->rear] = value;
    }
}

// Removing elements from queue
int dequeue(struct queue *q)
{
    int item;
    if (isEmpty(q))
    {
        printf("\nQueue is empty");
        item = -1;
    }
    else
    {
        item = q->items[q->front];
        q->front++;
        if (q->front > q->rear)
        {
            printf("\nResetting queue ");
            q->front = q->rear = -1;
        }
    }
    return item;
}

// Print the queue
void printQueue(struct queue *q)
{
    int i = q->front;

    if (isEmpty(q))
    {
        printf("Queue is empty");
    }
    else
    {
        printf("\nQueue contains \n");
        for (i = q->front; i < q->rear + 1; i++)
        {
            printf("%d ", q->items[i]);
        }
    }
}

int main()
{
    struct Graph *graph = createGraph(7);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 5, 6);

    bfs(graph, 0);

    return 0;
}



6) #include<stdio.h>
   #include<conio.h>
int a,b,u,v,n,i,j,ne=1;
int visited[10]= {
	0
}
,min,mincost=0,cost[10][10];
void main() {

	printf("\n Enter the number of nodes:");
	scanf("%d",&n);
	printf("\n Enter the adjacency matrix:\n");
	for (i=1;i<=n;i++)
	  for (j=1;j<=n;j++) {
		scanf("%d",&cost[i][j]);
		if(cost[i][j]==0)
		    cost[i][j]=999;
	}
	visited[1]=1;
	printf("\n");
	while(ne<n) {
		for (i=1,min=999;i<=n;i++)
		   for (j=1;j<=n;j++)
		    if(cost[i][j]<min)
		     if(visited[i]!=0) {
			min=cost[i][j];
			a=u=i;
			b=v=j;
		}
		if(visited[u]==0 || visited[v]==0) {
			printf("\n Edge %d:(%d %d) cost:%d",ne++,a,b,min);
			mincost+=min;
			visited[b]=1;
		}
		cost[a][b]=cost[b][a]=999;
	}
	printf("\n Minimun cost=%d",mincost);
	getch();
}



7) #include <stdio.h>
#define INFINITY 9999
#define MAX 10

void Dijkstra(int Graph[MAX][MAX], int n, int start);

void Dijkstra(int Graph[MAX][MAX], int n, int start)
{
    int cost[MAX][MAX], distance[MAX], pred[MAX];
    int visited[MAX], count, mindistance, nextnode, i, j;

    // Creating cost matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            if (Graph[i][j] == 0)
                cost[i][j] = INFINITY;
            else
                cost[i][j] = Graph[i][j];

    for (i = 0; i < n; i++)
    {
        distance[i] = cost[start][i];
        pred[i] = start;
        visited[i] = 0;
    }

    distance[start] = 0;
    visited[start] = 1;
    count = 1;

    while (count < n - 1)
    {
        mindistance = INFINITY;

        for (i = 0; i < n; i++)
            if (distance[i] < mindistance && !visited[i])
            {
                mindistance = distance[i];
                nextnode = i;
            }

        visited[nextnode] = 1;
        for (i = 0; i < n; i++)
            if (!visited[i])
                if (mindistance + cost[nextnode][i] < distance[i])
                {
                    distance[i] = mindistance + cost[nextnode][i];
                    pred[i] = nextnode;
                }
        count++;
    }

    // Printing the distance
    for (i = 0; i < n; i++)
        if (i != start)
        {
            printf("\nDistance from source to %d: %d", i, distance[i]);
        }
}
int main()
{
    int Graph[MAX][MAX], i, j, n, u;
    n = 7;

    Graph[0][0] = 2;
    Graph[0][1] = 2;
    Graph[0][2] = 2;
    Graph[0][3] = 2;
    Graph[0][4] = 0;
    Graph[0][5] = 3;
    Graph[0][6] = 2;

    Graph[1][0] = 0;
    Graph[1][1] = 2;
    Graph[1][2] = 2;
    Graph[1][3] = 0;
    Graph[1][4] = 1;
    Graph[1][5] = 2;
    Graph[1][6] = 1;

    Graph[2][0] = 0;
    Graph[2][1] = 1;
    Graph[2][2] = 2;
    Graph[2][3] = 3;
    Graph[2][4] = 2;
    Graph[2][5] = 1;
    Graph[2][6] = 2;

    Graph[3][0] = 2;
    Graph[3][1] = 1;
    Graph[3][2] = 1;
    Graph[3][3] = 0;
    Graph[3][4] = 2;
    Graph[3][5] = 0;
    Graph[3][6] = 1;

    Graph[4][0] = 0;
    Graph[4][1] = 3;
    Graph[4][2] = 2;
    Graph[4][3] = 0;
    Graph[4][4] = 1;
    Graph[4][5] = 1;
    Graph[4][6] = 2;

    Graph[5][0] = 3;
    Graph[5][1] = 1;
    Graph[5][2] = 0;
    Graph[5][3] = 2;
    Graph[5][4] = 1;
    Graph[5][5] = 1;
    Graph[5][6] = 0;

    Graph[6][0] = 2;
    Graph[6][1] = 3;
    Graph[6][2] = 0;
    Graph[6][3] = 1;
    Graph[6][4] = 0;
    Graph[6][5] = 2;
    Graph[6][6] = 1;

    u = 0;
    Dijkstra(Graph, n, u);

    return 0;
}

8) #include <stdio.h>
#include <stdlib.h>

// Merges two subarrays of arr[].
// First subarray is arr[l..m] and Second subarray is arr[m+1..r]
void merge(int arr[], int l, int m, int r)
{
	int i, j, k;
	int n1 = m - l + 1;
	int n2 = r - m;

	/* create temp arrays */
	int L[n1], R[n2];

	/* Copy data to temp arrays L[] and R[] */
	for (i = 0; i < n1; i++)
		L[i] = arr[l + i];
	for (j = 0; j < n2; j++)
		R[j] = arr[m + 1 + j];

	/* Merge the temp arrays back into arr[l..r]*/
	i = 0; // Initial index of first subarray
	j = 0; // Initial index of second subarray
	k = l; // Initial index of merged subarray
	while (i < n1 && j < n2) {
		if (L[i] <= R[j]) {
			arr[k] = L[i];
			i++;
		}
		else {
			arr[k] = R[j];
			j++;
		}
		k++;
	}

	/* Copy the remaining elements of L[], if there
	are any */
	while (i < n1) {
		arr[k] = L[i];
		i++;
		k++;
	}

	/* Copy the remaining elements of R[], if there
	are any */
	while (j < n2) {
		arr[k] = R[j];
		j++;
		k++;
	}
}

/* l is for left index and r is right index of the
sub-array of arr to be sorted */
void mergeSort(int arr[], int l, int r)
{
	if (l < r) {
		// Same as (l+r)/2, but avoids overflow for
		// large l and h
		int m = l + (r - l) / 2;

		// Sort first and second halves
		mergeSort(arr, l, m);
		mergeSort(arr, m + 1, r);

		merge(arr, l, m, r);
	}
}

/* UTILITY FUNCTIONS */
/* Function to print an array */
void printArray(int A[], int size)
{
	int i;
	for (i = 0; i < size; i++)
		printf("%d ", A[i]);
	printf("\n");
}



int main()
{
	int n,i;
	printf("Enter the number of elements that need to be sorted.");
	scanf("%d",&n);
	int arr[n];
	printf("Enter the elements");
	for(i=0;i<n;i++)
	scanf("%d",&arr[i]);


	printf("Given array is \n");
	printArray(arr, n);

	mergeSort(arr, 0, n - 1);

	printf("\nSorted array is \n");
	printArray(arr, n);
	return 0;
}



9) #include <stdio.h>

// function to swap elements
void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}

// function to find the partition position
int partition(int array[], int low, int high) {

  // select the rightmost element as pivot
  int pivot = array[high];

  // pointer for greater element
  int i = (low - 1);

  // traverse each element of the array
  // compare them with the pivot
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {      

      i++;
      swap(&array[i], &array[j]);
    }
  }


  swap(&array[i + 1], &array[high]);

  // return the partition point
  return (i + 1);
}



void quickSort(int array[], int low, int high) {
  if (low < high) {

    /*find the pivot element such that 
	elements smaller than pivot are on left of pivot
	 elements greater than pivot are on right of pivot*/
    int pi = partition(array, low, high);   
    quickSort(array, low, pi - 1);
    quickSort(array, pi + 1, high);
  }
}


// function to print array elements
void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}


int main() {
	int n,i;
	printf("Enter the number of elements that need to be sorted. ");
	scanf("%d",&n);
	int arr[n];
	printf("Enter the elements");
	for(i=0;i<n;i++)
	scanf("%d",&arr[i]);




  printf("Unsorted Array\n");
  printArray(arr, n);

  // perform quicksort on data
  quickSort(arr, 0, n - 1);

  printf("Sorted array in ascending order: \n");
  printArray(arr, n);
}



10) #include <stdio.h>

  // Function to swap the the position of two elements
  void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
  }

  void heapify(int arr[], int n, int i) {
    // Find largest among root, left child and right child
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] > arr[largest])
      largest = left;

    if (right < n && arr[right] > arr[largest])
      largest = right;

    // Swap and continue heapifying if root is not largest
    if (largest != i) {
      swap(&arr[i], &arr[largest]);
      heapify(arr, n, largest);
    }
  }

  // Main function to do heap sort
  void heapSort(int arr[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
      heapify(arr, n, i);

    // Heap sort
    for (int i = n - 1; i >= 0; i--) {
      swap(&arr[0], &arr[i]);

      // Heapify root element to get highest element at root again
      heapify(arr, i, 0);
    }
  }

  // Print array
  void printArray(int arr[], int n) {
    for (int i = 0; i < n; ++i)
      printf("%d ", arr[i]);
    printf("\n");
  }


  int main() {
  	int n,i;

	printf("Enter the number of elements that need to be sorted.");
	scanf("%d",&n);
	int arr[n];

	printf("Enter the elements");
	for(i=0;i<n;i++)
	scanf("%d",&arr[i]);  

  	printf("Unsorted Array\n");
  	printArray(arr,n);

    heapSort(arr, n);

    printf("Sorted array in ascending order is \n");
    printArray(arr, n);
  }